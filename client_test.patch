import unittest
import json
import random
import urllib.request

# Server API URLs
QUERY = "http://localhost:8080/query?id={}"

# 500 server request
N = 500


def getDataPoint(quote):
    """ Produce all the needed values to generate a datapoint """
    """ ------------- Update this function ------------- """
    stock = quote['stock']
    bid_price = float(quote['top_bid']['price'])
    ask_price = float(quote['top_ask']['price'])
    price = (bid_price + ask_price) / 2  # Calculate the average of bid and ask prices
    return stock, bid_price, ask_price, price


def getRatio(price_a, price_b):
    """ Get ratio of price_a and price_b """
    """ ------------- Update this function ------------- """
    if price_b != 0:
        ratio = price_a / price_b
        return ratio
    else:
        return None  # Handle the case where price_b is zero to avoid division by zero errors


class ClientTest(unittest.TestCase):

    def test_getDataPoint(self):
        # Test case 1
        quote1 = {
            'stock': 'ABC',
            'top_bid': {'price': '10.0'},
            'top_ask': {'price': '12.0'}
        }
        expected1 = ('ABC', 10.0, 12.0, 11.0)
        self.assertEqual(getDataPoint(quote1), expected1)

        # Test case 2
        quote2 = {
            'stock': 'DEF',
            'top_bid': {'price': '5.0'},
            'top_ask': {'price': '7.0'}
        }
        expected2 = ('DEF', 5.0, 7.0, 6.0)
        self.assertEqual(getDataPoint(quote2), expected2)

    def test_getRatio(self):
        # Test case 1: price_b is non-zero
        price_a1 = 10.0
        price_b1 = 5.0
        expected_ratio1 = 2.0
        self.assertEqual(getRatio(price_a1, price_b1), expected_ratio1)

        # Test case 2: price_b is zero
        price_a2 = 10.0
        price_b2 = 0.0
        expected_ratio2 = None
        self.assertEqual(getRatio(price_a2, price_b2), expected_ratio2)


if __name__ == "__main__":
    unittest.main()
